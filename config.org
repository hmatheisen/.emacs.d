#+TITLE: He-Macs
#+SUBTITLE: Henry's GNU Emacs literate config
#+AUTHOR: hmatheisen
#+LANGUAGE: en

#+BEGIN_QUOTE
I have the power! - [[https://www.youtube.com/watch?v=4zIoElk3r2c][He-Man]]
#+END_QUOTE

* Table of Contents :TOC:noexport:
- [[#what-is-this][What is this?]]
  - [[#abstract][Abstract]]
  - [[#why-though][Why though?]]
- [[#initialization][Initialization]]
- [[#editor-settings][Editor settings]]
  - [[#settings-without-packages][Settings without packages]]
  - [[#custom][Custom]]
  - [[#terminal-binary][Terminal binary]]
  - [[#window][Window]]
  - [[#windmove][WindMove]]
  - [[#y-or-n--yes-or-no][Y or N > Yes or No]]
  - [[#time-mode][Time mode]]
  - [[#simple][Simple]]
  - [[#display-battery-level][Display battery level]]
  - [[#line-numbers][Line numbers]]
  - [[#files][Files]]
  - [[#frame-settings][Frame settings]]
  - [[#startup][Startup]]
  - [[#faces][Faces]]
  - [[#winner-mode][Winner mode]]
  - [[#modern-region-behavior][Modern region behavior]]
  - [[#no-scroll-bar][No scroll bar]]
  - [[#matching-parentheses][Matching Parentheses]]
  - [[#ediff][Ediff]]
  - [[#auto-pair][Auto-pair]]
  - [[#use-ibuffer][Use ibuffer]]
  - [[#js][JS]]
  - [[#shell-script][Shell script]]
- [[#third-party-packages][Third Party Packages]]
  - [[#themes][Themes]]
  - [[#diminish][Diminish]]
  - [[#evil-mode][Evil Mode]]
  - [[#completion-frameworks][Completion Frameworks]]
  - [[#undo][Undo]]
  - [[#which-key][Which key]]
  - [[#magit][Magit]]
  - [[#org][Org]]
  - [[#dashboard][Dashboard]]
  - [[#neotree][Neotree]]
  - [[#code-completion][Code Completion]]
  - [[#projectile][Projectile]]
  - [[#all-the-icons][All the icons]]
  - [[#snippets][Snippets]]
  - [[#yaml][YAML]]
  - [[#latex][LaTeX]]
  - [[#ruby][Ruby]]
  - [[#olivetty][Olivetty]]
  - [[#beacon][Beacon]]
  - [[#imenu-list][IMenu-list]]

* What is this?

Let's forget about this dumb play on words between my name and a
cartoon from the 80's and actually explain what this file is.

** Abstract

This is my attempt at writing a literate Emacs configuration using
Org, a "simple outliner for note-taking and list management" that
actually does way more.  Although this configuration is for myself and
is opinionated, anyone is free to watch, copy or use its content.

** Why though?

Fame?  No.  Fun?  Maybe.  Having your whole configuration in a single
file might be a little messy but a literate file such as this one
looks like a neat idea to organize and document my dear Emacs
configuration.  Of course the file will eventually be gigantic but Org
Mode makes it easy to manage.  Documentation is also a huge plus since
I usually get lost in the maze of Emacs Lisp that is my current
config.

* Initialization

Some useful constants that will be used later in this file.

#+BEGIN_SRC emacs-lisp
  (defconst *is-a-mac* (eq system-type 'darwin)
    "Check whether system is mac.")
  (defconst *mono-font* "Iosevka"
    "Default mono font to be used.")
  (defconst *font-size* 13
    "Font size un points.")
#+END_SRC

* Editor settings

These are settings to change the look/behavior of Emacs using only
native options.  There is nothing really fancy happening here, just
cleaning up the UI and setting some variables.

** Settings without packages

These are settings defined in the C source code of emacs so they are
not related to any Lisp packages, let's put them in a package called
=emacs=.

*** Macos

#+BEGIN_SRC emacs-lisp
  ;; Avoid a few issues on MacOS
  (when *is-a-mac*
    (setq mac-option-modifier 'meta
          mac-command-modifier 'super
          mac-right-option-modifier 'nil
          select-enable-clipboard t))

  ;; title bar settings
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil)
  (setq frame-title-format nil)
#+END_SRC

*** UI/UX

#+BEGIN_SRC emacs-lisp
  ;; Remove Toolbar
  (tool-bar-mode -1)
  ;; Disable menu bar
  (menu-bar-mode -1)
  ;; Enable downcase/upcase region
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  ;; Trash can support
  (when *is-a-mac*
    (setq trash-directory "~/.Trash"))
  (setq delete-by-moving-to-trash t)
  ;; Indent using spaces
  (setq-default indent-tabs-mode nil)
  ;; Set tabs to 2
  (setq-default tab-width 2)
  ;; Make that damn bell shut up
  (setq ring-bell-function 'ignore)
  ;; Default truncate lines
  (setq-default truncate-lines t)
  ;; Unbind suspend keys
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z"))
#+END_SRC

*** UTF-8

#+BEGIN_SRC emacs-lisp
  ;; Set utf8 everywhere
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
#+END_SRC

** Custom

The custom file is not really useful here since every parameter is
set using elisp.  I still want to keep it in case a parameter is
set using `custom' I will know where to find it.

#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+END_SRC

** Terminal binary

On MacOS, I now use =zsh=, so it is set here so that I don't have to
type it everytime.

#+BEGIN_SRC emacs-lisp
  (if *is-a-mac*
      (setq explicit-shell-file-name "/bin/zsh"))
#+END_SRC

** Window

Better keys for resizing windows and moving around in buffers.

#+BEGIN_SRC emacs-lisp
  ;; Resizing
  (global-set-key (kbd "M--") 'shrink-window)
  (global-set-key (kbd "M-+") 'enlarge-window)
  (global-set-key (kbd "C--") 'shrink-window-horizontally)
  (global-set-key (kbd "C-+") 'enlarge-window-horizontally)

  ;; Move between buffers
  (global-set-key (kbd "C-<tab>") 'next-buffer)
  (global-set-key (kbd "C-S-<tab>") 'previous-buffer)
#+END_SRC

** WindMove

Use windmove to move around multiple windows easily

#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
#+END_SRC

** Y or N > Yes or No

Answer by =y= or =n= instead of =yes= of =no=.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Time mode

Display time on mode line.

#+BEGIN_SRC emacs-lisp
  (display-time-mode t)
#+END_SRC

** Simple

Display line numbers in mode line and undo keybinding.

#+BEGIN_SRC emacs-lisp
  ;; Displqy column number
  (column-number-mode t)

  ;; Kill to end of line
  (global-set-key (kbd "s-<backspace>")
                  (lambda ()
                    (interactive)
                    (kill-line 0)))

  ;; Do what escape should do (keep C-g behaviour)
  (global-set-key (kbd "<escape>") 'keyboard-quit)
#+END_SRC

** Display battery level

Display battery level inm mode line.

#+BEGIN_SRC emacs-lisp
  (display-battery-mode t)
#+END_SRC

** Line numbers

Display line numbers every =prog-mode=.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Files

Make sure that all backup files only exist in one place and always ask
before quitting Emacs.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/.backups")))
  (setq confirm-kill-emacs #'yes-or-no-p)
#+END_SRC

** Frame settings

Enable full frame on Emacs startup.

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'toggle-frame-fullscreen)
#+END_SRC

** Startup

Do not display startup splash screen since I use dashboard.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

** Faces

Explicitly set the different fonts.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default
                      nil
                      :family *mono-font*
                      :height (* *font-size* 10))

  (set-face-attribute 'fixed-pitch
                      nil
                      :family *mono-font*
                      :height (* *font-size* 10))

  (set-face-attribute 'variable-pitch
                      nil
                      :family "Raleway"
                      :height (* *font-size* 12))
#+END_SRC

** Winner mode

Allows to revert changes on the window configuration.

#+BEGIN_SRC emacs-lisp
  (winner-mode t)
#+END_SRC

** Modern region behavior

Replace the active region when typing/yanking text, which is a little
handier than the default behaviour.

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode +1)
#+END_SRC

** No scroll bar

I mean who likes this, really?

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

** Matching Parentheses

Show matching paren, quite useful for every languages especially Lisp!

#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode t)
#+END_SRC

** Ediff

Enter ediff with side-by-side buffers to better compare the
differences.

#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC

** Auto-pair

Auto close quote, parentheses, brackets, etc.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC

** Use ibuffer

Use ibuffer instead of default list buffer.

#+BEGIN_SRC emacs-lisp
  ;; Replace command to ibuffer
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  ;; Filter groups
  (setq ibuffer-saved-filter-groups
        '(("default"
           ("buffers"      (or (name . "\*dashboard\*")
                               (name . "\*scratch\*")))
           ("magit"        (name . "magit*"))
           ("he-macs"      (filename . ".emacs.d"))
           ("org"          (mode . org-mode))
           ("dired"        (mode . dired-mode))
           ("code"         (filename . "Code")))))
  ;; Add hook
  (add-hook 'ibuffer-mode-hook
            '(lambda ()
               (ibuffer-switch-to-saved-filter-groups "default")))
  ;; Do not show groups that are empty
  (setq ibuffer-show-empty-filter-groups nil)
  ;; Do not prompt when deleting a new buffer
  (setq ibuffer-expert t)
#+END_SRC

** JS

Set indent level for javascript/json files.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

** Shell script

#+BEGIN_SRC emacs-lisp
  (setq sh-basic-offset 2)
#+END_SRC

* Third Party Packages

Now this is wher the fun begins...

** Themes

Some of the themes I like

#+BEGIN_SRC emacs-lisp
  (use-package modus-vivendi-theme
    :defer t
    :init
    (setq modus-vivendi-theme-distinct-org-blocks t
          modus-vivendi-theme-rainbow-headings t
          modus-vivendi-theme-slanted-constructs t
          modus-vivendi-theme-bold-constructs t
          modus-vivendi-theme-scale-headings t
          modus-vivendi-theme-scale-1 1.05
          modus-vivendi-theme-scale-2 1.1
          modus-vivendi-theme-scale-3 1.15
          modus-vivendi-theme-scale-4 1.2))
  (use-package modus-operandi-theme
    :defer t
    :init
    (setq modus-operandi-theme-distinct-org-blocks t
          modus-operandi-theme-rainbow-headings t
          modus-operandi-theme-slanted-constructs t
          modus-operandi-theme-bold-constructs t
          modus-operandi-theme-scale-headings t
          modus-operandi-theme-scale-1 1.05
          modus-operandi-theme-scale-2 1.1
          modus-operandi-theme-scale-3 1.15
          modus-operandi-theme-scale-4 1.2))

  (load-theme 'modus-vivendi)
#+END_SRC

** Diminish

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :defer t
    :after use-package)
#+END_SRC

** Evil Mode

So it is treason then...
Yes, I know but let's face it, Vi editing is just really good ¯\_(ツ)_/¯

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    ;; Default state is emacs so Evil is only active when toggling it
    ;; with `C-!'
    (setq evil-toggle-key "C-x C-z")
    (setq evil-want-C-u-scroll t)
    :config
    ;; Switch on Evil mode
    (evil-mode t)
    (setq evil-default-state 'emacs))
#+END_SRC

** Completion Frameworks

I use Ivy as as a completion frontend, it integrates really well with
other super cool tools such as Swiper and Counsel.  There are other
choices for this such as Helm that I don't really like or the default
Ido mode that I should try one day.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :defer t
    :diminish ivy-mode counsel-mode
    :bind (("C-s" . swiper-isearch))
    :hook ((after-init . ivy-mode)
           (ivy-mode . counsel-mode))
    :init
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
#+END_SRC

** Undo

Use undo tree to visualize the powerful Emacs undo system.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode))
#+END_SRC

** Which key

This is great to get a list of available commands while typing a key chord.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.2
          which-key-idle-secondary-delay 0.2))
#+END_SRC

** Magit

Magit is an awesome git wrapper, everyone loves it, I love it and I
use it everyday.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :bind ("C-x g" . 'magit-status))
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :diminish visual-line-mode auto-fill-function
    :preface
    (defun he/org-mode-hook ()
      (org-indent-mode 1)
      (visual-line-mode 1)
      (auto-fill-mode 1))
    :hook ((org-mode . he/org-mode-hook)
           (org-indent-mode . (lambda ()
                                (diminish 'org-indent-mode)))
           (flyspell-mode . (lambda ()
                              (diminish 'flyspell-mode)))
           (buffer-face-mode . (lambda ()
                                 (diminish 'buffer-face-mode))))
    :config
    ;; Do not set headings face attributes if onve of the modus themes
    ;; is enabled since they already set this up.
    (set-face-attribute 'org-document-title nil :height 300)
    (set-face-attribute 'org-level-1        nil :height 200)
    (set-face-attribute 'org-level-2        nil :height 170)
    ;; Unbind C-<tab> to use 'next-buffer
    (define-key org-mode-map (kbd "C-<tab>") nil))

  (use-package org-bullets
    :defer t
    :hook (org-mode . org-bullets-mode))

  (use-package toc-org
    :defer t
    :hook ((org-mode      . toc-org-mode)
           (markdown-mode . toc-org-mode)))
#+END_SRC

** Dashboard

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'official
          dashboard-items '((bookmarks . 10)
                            (recents . 5))
          dashboard-center-content t
          dashboard-set-heading-icons t
          dashboard-set-file-icons t
          ;; Page break is now optional so this adds them back
          dashboard-page-separator "\n\f\n"
          dashboard-banner-logo-title "Welcome to He-Macs!"))
#+END_SRC

** Neotree

It's always handy having a file tree on the side !

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :defer t
    :config
    (setq neo-window-fixed-size nil)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (setq neo-hidden-regexp-list '("\\.git$"))
    :bind (([f8] . neotree-toggle)))
#+END_SRC

** Code Completion

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((ruby-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package company-mode
    :defer t
    :init
    (setq company-selection-wrap-around t)
    (setq company-minimum-prefix-length 1)
    (setq company-idle-delay 0)
    (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous))
    :ensure company
    :hook (after-init . (lambda ()
                          (global-company-mode)
                          (diminish 'company-mode))))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC

** Projectile

Testing =Projectile= for project management.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))
#+END_SRC

** All the icons

Icons support in Emacs

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :defer t)
#+END_SRC

** Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config (yas-global-mode t))
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :defer t)
#+END_SRC

** LaTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :defer t
    :diminish auto-fill-function
    :ensure auctex
    :config
    ;; Disable auto locale
    (setq TeX-auto-local nil)
    ;; Set TEXINPUTS to recognize classes in custom directory on MacOS
    (when *is-a-mac*
      (setenv "TEXINPUTS" (concat (getenv "TEXINPUTS")
                                  ":$HOME/Documents/Notes/classes")))
    :hook (LaTeX-mode . (lambda () (auto-fill-mode 1)
                          (set-fill-column 80))))
#+END_SRC

** Ruby

#+BEGIN_SRC emacs-lisp
  ;; Auto close for ruby
  (use-package ruby-electric
    :diminish ruby-electric-mode
    :defer t
    :hook (ruby-mode . ruby-electric-mode))
#+END_SRC

** Olivetty

Useful when writing prose.

#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :defer t
    :config (setq olivetti-body-width 110))
#+END_SRC

** Beacon

Never lose the cursor again.

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :config (beacon-mode t))
#+END_SRC

** IMenu-list

Creates a side buffer with the a list of imenu.

#+BEGIN_SRC emacs-lisp
  (use-package imenu-list
    :config (global-set-key (kbd "C-:") #'imenu-list-smart-toggle))
#+END_SRC
